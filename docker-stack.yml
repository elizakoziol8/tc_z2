version: "3"
services:
  postgres:
    image: "postgres:latest"
    environment:
      - POSTGRES_PASSWORD=${PGPASSWORD}
    networks:
      - back
    volumes:
      - 'pgdata:/var/lib/postgresql/data'
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "1"
          memory: 50M
        reservations:
          cpus: '0.5'
          memory: 25M

  redis:
    image: "redis:latest"
    networks:
      - back
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "1.5"
          memory: 100M
        reservations:
          cpus: "0.5"
          memory: 50M
  
  client:
    image: ek00/zad2:client_prod
    networks:
      back:
        aliases:
          - client
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.75"
          memory: 75M
        reservations:
          cpus: "0.25"
          memory: 25M
  
  api:
    image: ek00/zad2:server_prod
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - PGUSER=${PGUSER}
      - PGHOST=${PGHOST}
      - PGDATABASE=${PGDATABASE}
      - PGPASSWORD=${PGPASSWORD}
      - PGPORT=${PGPORT}
    depends_on:
      - postgres
      - redis
    networks:
      back:
        aliases:
          - api
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "2"
          memory: 75M
        reservations:
          cpus: "1"
          memory: 20M

  worker:
    image: ek00/zad2:worker_prod
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      - redis
    networks:
      - back
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "1"
          memory: 30M
        reservations:
          cpus: "0.75"
          memory: 10M

  nginx:
    depends_on:
      - api
      - client
    image: ek00/zad2:nginx_prod
    ports:
      - "3050:80"
    networks:
      - front
      - back
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "1"
          memory: 35M
        reservations:
          cpus: "0.25"
          memory: 10M

networks:
  front:
  back:
volumes:
  pgdata: